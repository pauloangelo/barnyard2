/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HBASE_TYPES_H
#define HBASE_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

typedef GByteArray * Text;

typedef GByteArray * Bytes;

typedef gint32 ScannerID;

/* struct TCell */
struct _TCell
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * value;
  gboolean __isset_value;
  gint64 timestamp;
  gboolean __isset_timestamp;
};
typedef struct _TCell TCell;

struct _TCellClass
{
  ThriftStructClass parent;
};
typedef struct _TCellClass TCellClass;

GType t_cell_get_type (void);
#define TYPE_T_CELL (t_cell_get_type())
#define T_CELL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_CELL, TCell))
#define T_CELL_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_CELL, TCellClass))
#define IS_T_CELL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_CELL))
#define IS_T_CELL_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_CELL))
#define T_CELL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_CELL, TCellClass))

/* struct ColumnDescriptor */
struct _ColumnDescriptor
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * name;
  gboolean __isset_name;
  gint32 maxVersions;
  gboolean __isset_maxVersions;
  gchar * compression;
  gboolean __isset_compression;
  gboolean inMemory;
  gboolean __isset_inMemory;
  gchar * bloomFilterType;
  gboolean __isset_bloomFilterType;
  gint32 bloomFilterVectorSize;
  gboolean __isset_bloomFilterVectorSize;
  gint32 bloomFilterNbHashes;
  gboolean __isset_bloomFilterNbHashes;
  gboolean blockCacheEnabled;
  gboolean __isset_blockCacheEnabled;
  gint32 timeToLive;
  gboolean __isset_timeToLive;
};
typedef struct _ColumnDescriptor ColumnDescriptor;

struct _ColumnDescriptorClass
{
  ThriftStructClass parent;
};
typedef struct _ColumnDescriptorClass ColumnDescriptorClass;

GType column_descriptor_get_type (void);
#define TYPE_COLUMN_DESCRIPTOR (column_descriptor_get_type())
#define COLUMN_DESCRIPTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_DESCRIPTOR, ColumnDescriptor))
#define COLUMN_DESCRIPTOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_DESCRIPTOR, ColumnDescriptorClass))
#define IS_COLUMN_DESCRIPTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_DESCRIPTOR))
#define IS_COLUMN_DESCRIPTOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_DESCRIPTOR))
#define COLUMN_DESCRIPTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_DESCRIPTOR, ColumnDescriptorClass))

/* struct TRegionInfo */
struct _TRegionInfo
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * startKey;
  gboolean __isset_startKey;
  GByteArray * endKey;
  gboolean __isset_endKey;
  gint64 id;
  gboolean __isset_id;
  GByteArray * name;
  gboolean __isset_name;
  gint8 version;
  gboolean __isset_version;
  GByteArray * serverName;
  gboolean __isset_serverName;
  gint32 port;
  gboolean __isset_port;
};
typedef struct _TRegionInfo TRegionInfo;

struct _TRegionInfoClass
{
  ThriftStructClass parent;
};
typedef struct _TRegionInfoClass TRegionInfoClass;

GType t_region_info_get_type (void);
#define TYPE_T_REGION_INFO (t_region_info_get_type())
#define T_REGION_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_REGION_INFO, TRegionInfo))
#define T_REGION_INFO_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_REGION_INFO, TRegionInfoClass))
#define IS_T_REGION_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_REGION_INFO))
#define IS_T_REGION_INFO_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_REGION_INFO))
#define T_REGION_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_REGION_INFO, TRegionInfoClass))

/* struct Mutation */
struct _Mutation
{ 
  ThriftStruct parent; 

  /* public */
  gboolean isDelete;
  gboolean __isset_isDelete;
  GByteArray * column;
  gboolean __isset_column;
  GByteArray * value;
  gboolean __isset_value;
  gboolean writeToWAL;
  gboolean __isset_writeToWAL;
};
typedef struct _Mutation Mutation;

struct _MutationClass
{
  ThriftStructClass parent;
};
typedef struct _MutationClass MutationClass;

GType mutation_get_type (void);
#define TYPE_MUTATION (mutation_get_type())
#define MUTATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MUTATION, Mutation))
#define MUTATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_MUTATION, MutationClass))
#define IS_MUTATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MUTATION))
#define IS_MUTATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MUTATION))
#define MUTATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MUTATION, MutationClass))

/* struct BatchMutation */
struct _BatchMutation
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * mutations;
  gboolean __isset_mutations;
};
typedef struct _BatchMutation BatchMutation;

struct _BatchMutationClass
{
  ThriftStructClass parent;
};
typedef struct _BatchMutationClass BatchMutationClass;

GType batch_mutation_get_type (void);
#define TYPE_BATCH_MUTATION (batch_mutation_get_type())
#define BATCH_MUTATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BATCH_MUTATION, BatchMutation))
#define BATCH_MUTATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BATCH_MUTATION, BatchMutationClass))
#define IS_BATCH_MUTATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BATCH_MUTATION))
#define IS_BATCH_MUTATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BATCH_MUTATION))
#define BATCH_MUTATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BATCH_MUTATION, BatchMutationClass))

/* struct TIncrement */
struct _TIncrement
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  gboolean __isset_table;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  gint64 ammount;
  gboolean __isset_ammount;
};
typedef struct _TIncrement TIncrement;

struct _TIncrementClass
{
  ThriftStructClass parent;
};
typedef struct _TIncrementClass TIncrementClass;

GType t_increment_get_type (void);
#define TYPE_T_INCREMENT (t_increment_get_type())
#define T_INCREMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_INCREMENT, TIncrement))
#define T_INCREMENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_INCREMENT, TIncrementClass))
#define IS_T_INCREMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_INCREMENT))
#define IS_T_INCREMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_INCREMENT))
#define T_INCREMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_INCREMENT, TIncrementClass))

/* struct TColumn */
struct _TColumn
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * columnName;
  gboolean __isset_columnName;
  TCell * cell;
  gboolean __isset_cell;
};
typedef struct _TColumn TColumn;

struct _TColumnClass
{
  ThriftStructClass parent;
};
typedef struct _TColumnClass TColumnClass;

GType t_column_get_type (void);
#define TYPE_T_COLUMN (t_column_get_type())
#define T_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_COLUMN, TColumn))
#define T_COLUMN_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_COLUMN, TColumnClass))
#define IS_T_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_COLUMN))
#define IS_T_COLUMN_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_COLUMN))
#define T_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_COLUMN, TColumnClass))

/* struct TRowResult */
struct _TRowResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  gboolean __isset_row;
  GHashTable * columns;
  gboolean __isset_columns;
  GPtrArray * sortedColumns;
  gboolean __isset_sortedColumns;
};
typedef struct _TRowResult TRowResult;

struct _TRowResultClass
{
  ThriftStructClass parent;
};
typedef struct _TRowResultClass TRowResultClass;

GType t_row_result_get_type (void);
#define TYPE_T_ROW_RESULT (t_row_result_get_type())
#define T_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_ROW_RESULT, TRowResult))
#define T_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_ROW_RESULT, TRowResultClass))
#define IS_T_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_ROW_RESULT))
#define IS_T_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_ROW_RESULT))
#define T_ROW_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_ROW_RESULT, TRowResultClass))

/* struct TScan */
struct _TScan
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * startRow;
  gboolean __isset_startRow;
  GByteArray * stopRow;
  gboolean __isset_stopRow;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint32 caching;
  gboolean __isset_caching;
  GByteArray * filterString;
  gboolean __isset_filterString;
  gint32 batchSize;
  gboolean __isset_batchSize;
  gboolean sortColumns;
  gboolean __isset_sortColumns;
  gboolean reversed;
  gboolean __isset_reversed;
};
typedef struct _TScan TScan;

struct _TScanClass
{
  ThriftStructClass parent;
};
typedef struct _TScanClass TScanClass;

GType t_scan_get_type (void);
#define TYPE_T_SCAN (t_scan_get_type())
#define T_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_SCAN, TScan))
#define T_SCAN_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_SCAN, TScanClass))
#define IS_T_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_SCAN))
#define IS_T_SCAN_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_SCAN))
#define T_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_SCAN, TScanClass))

/* struct TAppend */
struct _TAppend
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  gboolean __isset_table;
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * columns;
  gboolean __isset_columns;
  GPtrArray * values;
  gboolean __isset_values;
};
typedef struct _TAppend TAppend;

struct _TAppendClass
{
  ThriftStructClass parent;
};
typedef struct _TAppendClass TAppendClass;

GType t_append_get_type (void);
#define TYPE_T_APPEND (t_append_get_type())
#define T_APPEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_APPEND, TAppend))
#define T_APPEND_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_APPEND, TAppendClass))
#define IS_T_APPEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_APPEND))
#define IS_T_APPEND_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_APPEND))
#define T_APPEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_APPEND, TAppendClass))

struct _IOError
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
};
typedef struct _IOError IOError;

struct _IOErrorClass
{
  ThriftStructClass parent;
};
typedef struct _IOErrorClass IOErrorClass;

GType i_o_error_get_type (void);
#define TYPE_I_O_ERROR (i_o_error_get_type())
#define I_O_ERROR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_O_ERROR, IOError))
#define I_O_ERROR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_O_ERROR, IOErrorClass))
#define IS_I_O_ERROR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_O_ERROR))
#define IS_I_O_ERROR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_O_ERROR))
#define I_O_ERROR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_O_ERROR, IOErrorClass))

/* exception */
typedef enum
{
  I_O_ERROR_ERROR_CODE
} IOErrorError;

GQuark i_o_error_error_quark (void);
#define I_O_ERROR_ERROR (i_o_error_error_quark())


struct _IllegalArgument
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
};
typedef struct _IllegalArgument IllegalArgument;

struct _IllegalArgumentClass
{
  ThriftStructClass parent;
};
typedef struct _IllegalArgumentClass IllegalArgumentClass;

GType illegal_argument_get_type (void);
#define TYPE_ILLEGAL_ARGUMENT (illegal_argument_get_type())
#define ILLEGAL_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ILLEGAL_ARGUMENT, IllegalArgument))
#define ILLEGAL_ARGUMENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ILLEGAL_ARGUMENT, IllegalArgumentClass))
#define IS_ILLEGAL_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ILLEGAL_ARGUMENT))
#define IS_ILLEGAL_ARGUMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ILLEGAL_ARGUMENT))
#define ILLEGAL_ARGUMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ILLEGAL_ARGUMENT, IllegalArgumentClass))

/* exception */
typedef enum
{
  ILLEGAL_ARGUMENT_ERROR_CODE
} IllegalArgumentError;

GQuark illegal_argument_error_quark (void);
#define ILLEGAL_ARGUMENT_ERROR (illegal_argument_error_quark())


struct _AlreadyExists
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
};
typedef struct _AlreadyExists AlreadyExists;

struct _AlreadyExistsClass
{
  ThriftStructClass parent;
};
typedef struct _AlreadyExistsClass AlreadyExistsClass;

GType already_exists_get_type (void);
#define TYPE_ALREADY_EXISTS (already_exists_get_type())
#define ALREADY_EXISTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ALREADY_EXISTS, AlreadyExists))
#define ALREADY_EXISTS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ALREADY_EXISTS, AlreadyExistsClass))
#define IS_ALREADY_EXISTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ALREADY_EXISTS))
#define IS_ALREADY_EXISTS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ALREADY_EXISTS))
#define ALREADY_EXISTS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ALREADY_EXISTS, AlreadyExistsClass))

/* exception */
typedef enum
{
  ALREADY_EXISTS_ERROR_CODE
} AlreadyExistsError;

GQuark already_exists_error_quark (void);
#define ALREADY_EXISTS_ERROR (already_exists_error_quark())


/* constants */

/* struct HbaseEnableTableArgs */
struct _HbaseEnableTableArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
};
typedef struct _HbaseEnableTableArgs HbaseEnableTableArgs;

struct _HbaseEnableTableArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseEnableTableArgsClass HbaseEnableTableArgsClass;

GType hbase_enable_table_args_get_type (void);
#define TYPE_HBASE_ENABLE_TABLE_ARGS (hbase_enable_table_args_get_type())
#define HBASE_ENABLE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_ENABLE_TABLE_ARGS, HbaseEnableTableArgs))
#define HBASE_ENABLE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_ENABLE_TABLE_ARGS, HbaseEnableTableArgsClass))
#define IS_HBASE_ENABLE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_ENABLE_TABLE_ARGS))
#define IS_HBASE_ENABLE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_ENABLE_TABLE_ARGS))
#define HBASE_ENABLE_TABLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_ENABLE_TABLE_ARGS, HbaseEnableTableArgsClass))

/* struct HbaseEnableTableResult */
struct _HbaseEnableTableResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseEnableTableResult HbaseEnableTableResult;

struct _HbaseEnableTableResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseEnableTableResultClass HbaseEnableTableResultClass;

GType hbase_enable_table_result_get_type (void);
#define TYPE_HBASE_ENABLE_TABLE_RESULT (hbase_enable_table_result_get_type())
#define HBASE_ENABLE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_ENABLE_TABLE_RESULT, HbaseEnableTableResult))
#define HBASE_ENABLE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_ENABLE_TABLE_RESULT, HbaseEnableTableResultClass))
#define IS_HBASE_ENABLE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_ENABLE_TABLE_RESULT))
#define IS_HBASE_ENABLE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_ENABLE_TABLE_RESULT))
#define HBASE_ENABLE_TABLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_ENABLE_TABLE_RESULT, HbaseEnableTableResultClass))

/* struct HbaseDisableTableArgs */
struct _HbaseDisableTableArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
};
typedef struct _HbaseDisableTableArgs HbaseDisableTableArgs;

struct _HbaseDisableTableArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDisableTableArgsClass HbaseDisableTableArgsClass;

GType hbase_disable_table_args_get_type (void);
#define TYPE_HBASE_DISABLE_TABLE_ARGS (hbase_disable_table_args_get_type())
#define HBASE_DISABLE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DISABLE_TABLE_ARGS, HbaseDisableTableArgs))
#define HBASE_DISABLE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DISABLE_TABLE_ARGS, HbaseDisableTableArgsClass))
#define IS_HBASE_DISABLE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DISABLE_TABLE_ARGS))
#define IS_HBASE_DISABLE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DISABLE_TABLE_ARGS))
#define HBASE_DISABLE_TABLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DISABLE_TABLE_ARGS, HbaseDisableTableArgsClass))

/* struct HbaseDisableTableResult */
struct _HbaseDisableTableResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseDisableTableResult HbaseDisableTableResult;

struct _HbaseDisableTableResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDisableTableResultClass HbaseDisableTableResultClass;

GType hbase_disable_table_result_get_type (void);
#define TYPE_HBASE_DISABLE_TABLE_RESULT (hbase_disable_table_result_get_type())
#define HBASE_DISABLE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DISABLE_TABLE_RESULT, HbaseDisableTableResult))
#define HBASE_DISABLE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DISABLE_TABLE_RESULT, HbaseDisableTableResultClass))
#define IS_HBASE_DISABLE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DISABLE_TABLE_RESULT))
#define IS_HBASE_DISABLE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DISABLE_TABLE_RESULT))
#define HBASE_DISABLE_TABLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DISABLE_TABLE_RESULT, HbaseDisableTableResultClass))

/* struct HbaseIsTableEnabledArgs */
struct _HbaseIsTableEnabledArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
};
typedef struct _HbaseIsTableEnabledArgs HbaseIsTableEnabledArgs;

struct _HbaseIsTableEnabledArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseIsTableEnabledArgsClass HbaseIsTableEnabledArgsClass;

GType hbase_is_table_enabled_args_get_type (void);
#define TYPE_HBASE_IS_TABLE_ENABLED_ARGS (hbase_is_table_enabled_args_get_type())
#define HBASE_IS_TABLE_ENABLED_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_IS_TABLE_ENABLED_ARGS, HbaseIsTableEnabledArgs))
#define HBASE_IS_TABLE_ENABLED_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_IS_TABLE_ENABLED_ARGS, HbaseIsTableEnabledArgsClass))
#define IS_HBASE_IS_TABLE_ENABLED_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_IS_TABLE_ENABLED_ARGS))
#define IS_HBASE_IS_TABLE_ENABLED_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_IS_TABLE_ENABLED_ARGS))
#define HBASE_IS_TABLE_ENABLED_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_IS_TABLE_ENABLED_ARGS, HbaseIsTableEnabledArgsClass))

/* struct HbaseIsTableEnabledResult */
struct _HbaseIsTableEnabledResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseIsTableEnabledResult HbaseIsTableEnabledResult;

struct _HbaseIsTableEnabledResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseIsTableEnabledResultClass HbaseIsTableEnabledResultClass;

GType hbase_is_table_enabled_result_get_type (void);
#define TYPE_HBASE_IS_TABLE_ENABLED_RESULT (hbase_is_table_enabled_result_get_type())
#define HBASE_IS_TABLE_ENABLED_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_IS_TABLE_ENABLED_RESULT, HbaseIsTableEnabledResult))
#define HBASE_IS_TABLE_ENABLED_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_IS_TABLE_ENABLED_RESULT, HbaseIsTableEnabledResultClass))
#define IS_HBASE_IS_TABLE_ENABLED_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_IS_TABLE_ENABLED_RESULT))
#define IS_HBASE_IS_TABLE_ENABLED_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_IS_TABLE_ENABLED_RESULT))
#define HBASE_IS_TABLE_ENABLED_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_IS_TABLE_ENABLED_RESULT, HbaseIsTableEnabledResultClass))

/* struct HbaseCompactArgs */
struct _HbaseCompactArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableNameOrRegionName;
  gboolean __isset_tableNameOrRegionName;
};
typedef struct _HbaseCompactArgs HbaseCompactArgs;

struct _HbaseCompactArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseCompactArgsClass HbaseCompactArgsClass;

GType hbase_compact_args_get_type (void);
#define TYPE_HBASE_COMPACT_ARGS (hbase_compact_args_get_type())
#define HBASE_COMPACT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_COMPACT_ARGS, HbaseCompactArgs))
#define HBASE_COMPACT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_COMPACT_ARGS, HbaseCompactArgsClass))
#define IS_HBASE_COMPACT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_COMPACT_ARGS))
#define IS_HBASE_COMPACT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_COMPACT_ARGS))
#define HBASE_COMPACT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_COMPACT_ARGS, HbaseCompactArgsClass))

/* struct HbaseCompactResult */
struct _HbaseCompactResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseCompactResult HbaseCompactResult;

struct _HbaseCompactResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseCompactResultClass HbaseCompactResultClass;

GType hbase_compact_result_get_type (void);
#define TYPE_HBASE_COMPACT_RESULT (hbase_compact_result_get_type())
#define HBASE_COMPACT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_COMPACT_RESULT, HbaseCompactResult))
#define HBASE_COMPACT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_COMPACT_RESULT, HbaseCompactResultClass))
#define IS_HBASE_COMPACT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_COMPACT_RESULT))
#define IS_HBASE_COMPACT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_COMPACT_RESULT))
#define HBASE_COMPACT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_COMPACT_RESULT, HbaseCompactResultClass))

/* struct HbaseMajorCompactArgs */
struct _HbaseMajorCompactArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableNameOrRegionName;
  gboolean __isset_tableNameOrRegionName;
};
typedef struct _HbaseMajorCompactArgs HbaseMajorCompactArgs;

struct _HbaseMajorCompactArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMajorCompactArgsClass HbaseMajorCompactArgsClass;

GType hbase_major_compact_args_get_type (void);
#define TYPE_HBASE_MAJOR_COMPACT_ARGS (hbase_major_compact_args_get_type())
#define HBASE_MAJOR_COMPACT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MAJOR_COMPACT_ARGS, HbaseMajorCompactArgs))
#define HBASE_MAJOR_COMPACT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MAJOR_COMPACT_ARGS, HbaseMajorCompactArgsClass))
#define IS_HBASE_MAJOR_COMPACT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MAJOR_COMPACT_ARGS))
#define IS_HBASE_MAJOR_COMPACT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MAJOR_COMPACT_ARGS))
#define HBASE_MAJOR_COMPACT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MAJOR_COMPACT_ARGS, HbaseMajorCompactArgsClass))

/* struct HbaseMajorCompactResult */
struct _HbaseMajorCompactResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseMajorCompactResult HbaseMajorCompactResult;

struct _HbaseMajorCompactResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMajorCompactResultClass HbaseMajorCompactResultClass;

GType hbase_major_compact_result_get_type (void);
#define TYPE_HBASE_MAJOR_COMPACT_RESULT (hbase_major_compact_result_get_type())
#define HBASE_MAJOR_COMPACT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MAJOR_COMPACT_RESULT, HbaseMajorCompactResult))
#define HBASE_MAJOR_COMPACT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MAJOR_COMPACT_RESULT, HbaseMajorCompactResultClass))
#define IS_HBASE_MAJOR_COMPACT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MAJOR_COMPACT_RESULT))
#define IS_HBASE_MAJOR_COMPACT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MAJOR_COMPACT_RESULT))
#define HBASE_MAJOR_COMPACT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MAJOR_COMPACT_RESULT, HbaseMajorCompactResultClass))

/* struct HbaseGetTableNamesArgs */
struct _HbaseGetTableNamesArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _HbaseGetTableNamesArgs HbaseGetTableNamesArgs;

struct _HbaseGetTableNamesArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetTableNamesArgsClass HbaseGetTableNamesArgsClass;

GType hbase_get_table_names_args_get_type (void);
#define TYPE_HBASE_GET_TABLE_NAMES_ARGS (hbase_get_table_names_args_get_type())
#define HBASE_GET_TABLE_NAMES_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_TABLE_NAMES_ARGS, HbaseGetTableNamesArgs))
#define HBASE_GET_TABLE_NAMES_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_TABLE_NAMES_ARGS, HbaseGetTableNamesArgsClass))
#define IS_HBASE_GET_TABLE_NAMES_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_TABLE_NAMES_ARGS))
#define IS_HBASE_GET_TABLE_NAMES_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_TABLE_NAMES_ARGS))
#define HBASE_GET_TABLE_NAMES_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_TABLE_NAMES_ARGS, HbaseGetTableNamesArgsClass))

/* struct HbaseGetTableNamesResult */
struct _HbaseGetTableNamesResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetTableNamesResult HbaseGetTableNamesResult;

struct _HbaseGetTableNamesResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetTableNamesResultClass HbaseGetTableNamesResultClass;

GType hbase_get_table_names_result_get_type (void);
#define TYPE_HBASE_GET_TABLE_NAMES_RESULT (hbase_get_table_names_result_get_type())
#define HBASE_GET_TABLE_NAMES_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_TABLE_NAMES_RESULT, HbaseGetTableNamesResult))
#define HBASE_GET_TABLE_NAMES_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_TABLE_NAMES_RESULT, HbaseGetTableNamesResultClass))
#define IS_HBASE_GET_TABLE_NAMES_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_TABLE_NAMES_RESULT))
#define IS_HBASE_GET_TABLE_NAMES_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_TABLE_NAMES_RESULT))
#define HBASE_GET_TABLE_NAMES_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_TABLE_NAMES_RESULT, HbaseGetTableNamesResultClass))

/* struct HbaseGetColumnDescriptorsArgs */
struct _HbaseGetColumnDescriptorsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
};
typedef struct _HbaseGetColumnDescriptorsArgs HbaseGetColumnDescriptorsArgs;

struct _HbaseGetColumnDescriptorsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetColumnDescriptorsArgsClass HbaseGetColumnDescriptorsArgsClass;

GType hbase_get_column_descriptors_args_get_type (void);
#define TYPE_HBASE_GET_COLUMN_DESCRIPTORS_ARGS (hbase_get_column_descriptors_args_get_type())
#define HBASE_GET_COLUMN_DESCRIPTORS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_ARGS, HbaseGetColumnDescriptorsArgs))
#define HBASE_GET_COLUMN_DESCRIPTORS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_COLUMN_DESCRIPTORS_ARGS, HbaseGetColumnDescriptorsArgsClass))
#define IS_HBASE_GET_COLUMN_DESCRIPTORS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_ARGS))
#define IS_HBASE_GET_COLUMN_DESCRIPTORS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_ARGS))
#define HBASE_GET_COLUMN_DESCRIPTORS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_ARGS, HbaseGetColumnDescriptorsArgsClass))

/* struct HbaseGetColumnDescriptorsResult */
struct _HbaseGetColumnDescriptorsResult
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetColumnDescriptorsResult HbaseGetColumnDescriptorsResult;

struct _HbaseGetColumnDescriptorsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetColumnDescriptorsResultClass HbaseGetColumnDescriptorsResultClass;

GType hbase_get_column_descriptors_result_get_type (void);
#define TYPE_HBASE_GET_COLUMN_DESCRIPTORS_RESULT (hbase_get_column_descriptors_result_get_type())
#define HBASE_GET_COLUMN_DESCRIPTORS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_RESULT, HbaseGetColumnDescriptorsResult))
#define HBASE_GET_COLUMN_DESCRIPTORS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_COLUMN_DESCRIPTORS_RESULT, HbaseGetColumnDescriptorsResultClass))
#define IS_HBASE_GET_COLUMN_DESCRIPTORS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_RESULT))
#define IS_HBASE_GET_COLUMN_DESCRIPTORS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_RESULT))
#define HBASE_GET_COLUMN_DESCRIPTORS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_COLUMN_DESCRIPTORS_RESULT, HbaseGetColumnDescriptorsResultClass))

/* struct HbaseGetTableRegionsArgs */
struct _HbaseGetTableRegionsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
};
typedef struct _HbaseGetTableRegionsArgs HbaseGetTableRegionsArgs;

struct _HbaseGetTableRegionsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetTableRegionsArgsClass HbaseGetTableRegionsArgsClass;

GType hbase_get_table_regions_args_get_type (void);
#define TYPE_HBASE_GET_TABLE_REGIONS_ARGS (hbase_get_table_regions_args_get_type())
#define HBASE_GET_TABLE_REGIONS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_TABLE_REGIONS_ARGS, HbaseGetTableRegionsArgs))
#define HBASE_GET_TABLE_REGIONS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_TABLE_REGIONS_ARGS, HbaseGetTableRegionsArgsClass))
#define IS_HBASE_GET_TABLE_REGIONS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_TABLE_REGIONS_ARGS))
#define IS_HBASE_GET_TABLE_REGIONS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_TABLE_REGIONS_ARGS))
#define HBASE_GET_TABLE_REGIONS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_TABLE_REGIONS_ARGS, HbaseGetTableRegionsArgsClass))

/* struct HbaseGetTableRegionsResult */
struct _HbaseGetTableRegionsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetTableRegionsResult HbaseGetTableRegionsResult;

struct _HbaseGetTableRegionsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetTableRegionsResultClass HbaseGetTableRegionsResultClass;

GType hbase_get_table_regions_result_get_type (void);
#define TYPE_HBASE_GET_TABLE_REGIONS_RESULT (hbase_get_table_regions_result_get_type())
#define HBASE_GET_TABLE_REGIONS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_TABLE_REGIONS_RESULT, HbaseGetTableRegionsResult))
#define HBASE_GET_TABLE_REGIONS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_TABLE_REGIONS_RESULT, HbaseGetTableRegionsResultClass))
#define IS_HBASE_GET_TABLE_REGIONS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_TABLE_REGIONS_RESULT))
#define IS_HBASE_GET_TABLE_REGIONS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_TABLE_REGIONS_RESULT))
#define HBASE_GET_TABLE_REGIONS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_TABLE_REGIONS_RESULT, HbaseGetTableRegionsResultClass))

/* struct HbaseCreateTableArgs */
struct _HbaseCreateTableArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * columnFamilies;
  gboolean __isset_columnFamilies;
};
typedef struct _HbaseCreateTableArgs HbaseCreateTableArgs;

struct _HbaseCreateTableArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseCreateTableArgsClass HbaseCreateTableArgsClass;

GType hbase_create_table_args_get_type (void);
#define TYPE_HBASE_CREATE_TABLE_ARGS (hbase_create_table_args_get_type())
#define HBASE_CREATE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_CREATE_TABLE_ARGS, HbaseCreateTableArgs))
#define HBASE_CREATE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_CREATE_TABLE_ARGS, HbaseCreateTableArgsClass))
#define IS_HBASE_CREATE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_CREATE_TABLE_ARGS))
#define IS_HBASE_CREATE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_CREATE_TABLE_ARGS))
#define HBASE_CREATE_TABLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_CREATE_TABLE_ARGS, HbaseCreateTableArgsClass))

/* struct HbaseCreateTableResult */
struct _HbaseCreateTableResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
  AlreadyExists * exist;
  gboolean __isset_exist;
};
typedef struct _HbaseCreateTableResult HbaseCreateTableResult;

struct _HbaseCreateTableResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseCreateTableResultClass HbaseCreateTableResultClass;

GType hbase_create_table_result_get_type (void);
#define TYPE_HBASE_CREATE_TABLE_RESULT (hbase_create_table_result_get_type())
#define HBASE_CREATE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_CREATE_TABLE_RESULT, HbaseCreateTableResult))
#define HBASE_CREATE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_CREATE_TABLE_RESULT, HbaseCreateTableResultClass))
#define IS_HBASE_CREATE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_CREATE_TABLE_RESULT))
#define IS_HBASE_CREATE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_CREATE_TABLE_RESULT))
#define HBASE_CREATE_TABLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_CREATE_TABLE_RESULT, HbaseCreateTableResultClass))

/* struct HbaseDeleteTableArgs */
struct _HbaseDeleteTableArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
};
typedef struct _HbaseDeleteTableArgs HbaseDeleteTableArgs;

struct _HbaseDeleteTableArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteTableArgsClass HbaseDeleteTableArgsClass;

GType hbase_delete_table_args_get_type (void);
#define TYPE_HBASE_DELETE_TABLE_ARGS (hbase_delete_table_args_get_type())
#define HBASE_DELETE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_TABLE_ARGS, HbaseDeleteTableArgs))
#define HBASE_DELETE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_TABLE_ARGS, HbaseDeleteTableArgsClass))
#define IS_HBASE_DELETE_TABLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_TABLE_ARGS))
#define IS_HBASE_DELETE_TABLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_TABLE_ARGS))
#define HBASE_DELETE_TABLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_TABLE_ARGS, HbaseDeleteTableArgsClass))

/* struct HbaseDeleteTableResult */
struct _HbaseDeleteTableResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseDeleteTableResult HbaseDeleteTableResult;

struct _HbaseDeleteTableResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteTableResultClass HbaseDeleteTableResultClass;

GType hbase_delete_table_result_get_type (void);
#define TYPE_HBASE_DELETE_TABLE_RESULT (hbase_delete_table_result_get_type())
#define HBASE_DELETE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_TABLE_RESULT, HbaseDeleteTableResult))
#define HBASE_DELETE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_TABLE_RESULT, HbaseDeleteTableResultClass))
#define IS_HBASE_DELETE_TABLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_TABLE_RESULT))
#define IS_HBASE_DELETE_TABLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_TABLE_RESULT))
#define HBASE_DELETE_TABLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_TABLE_RESULT, HbaseDeleteTableResultClass))

/* struct HbaseGetArgs */
struct _HbaseGetArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetArgs HbaseGetArgs;

struct _HbaseGetArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetArgsClass HbaseGetArgsClass;

GType hbase_get_args_get_type (void);
#define TYPE_HBASE_GET_ARGS (hbase_get_args_get_type())
#define HBASE_GET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ARGS, HbaseGetArgs))
#define HBASE_GET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ARGS, HbaseGetArgsClass))
#define IS_HBASE_GET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ARGS))
#define IS_HBASE_GET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ARGS))
#define HBASE_GET_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ARGS, HbaseGetArgsClass))

/* struct HbaseGetResult */
struct _HbaseGetResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetResult HbaseGetResult;

struct _HbaseGetResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetResultClass HbaseGetResultClass;

GType hbase_get_result_get_type (void);
#define TYPE_HBASE_GET_RESULT (hbase_get_result_get_type())
#define HBASE_GET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_RESULT, HbaseGetResult))
#define HBASE_GET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_RESULT, HbaseGetResultClass))
#define IS_HBASE_GET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_RESULT))
#define IS_HBASE_GET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_RESULT))
#define HBASE_GET_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_RESULT, HbaseGetResultClass))

/* struct HbaseGetVerArgs */
struct _HbaseGetVerArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  gint32 numVersions;
  gboolean __isset_numVersions;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetVerArgs HbaseGetVerArgs;

struct _HbaseGetVerArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetVerArgsClass HbaseGetVerArgsClass;

GType hbase_get_ver_args_get_type (void);
#define TYPE_HBASE_GET_VER_ARGS (hbase_get_ver_args_get_type())
#define HBASE_GET_VER_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_VER_ARGS, HbaseGetVerArgs))
#define HBASE_GET_VER_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_VER_ARGS, HbaseGetVerArgsClass))
#define IS_HBASE_GET_VER_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_VER_ARGS))
#define IS_HBASE_GET_VER_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_VER_ARGS))
#define HBASE_GET_VER_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_VER_ARGS, HbaseGetVerArgsClass))

/* struct HbaseGetVerResult */
struct _HbaseGetVerResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetVerResult HbaseGetVerResult;

struct _HbaseGetVerResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetVerResultClass HbaseGetVerResultClass;

GType hbase_get_ver_result_get_type (void);
#define TYPE_HBASE_GET_VER_RESULT (hbase_get_ver_result_get_type())
#define HBASE_GET_VER_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_VER_RESULT, HbaseGetVerResult))
#define HBASE_GET_VER_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_VER_RESULT, HbaseGetVerResultClass))
#define IS_HBASE_GET_VER_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_VER_RESULT))
#define IS_HBASE_GET_VER_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_VER_RESULT))
#define HBASE_GET_VER_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_VER_RESULT, HbaseGetVerResultClass))

/* struct HbaseGetVerTsArgs */
struct _HbaseGetVerTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  gint64 timestamp;
  gboolean __isset_timestamp;
  gint32 numVersions;
  gboolean __isset_numVersions;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetVerTsArgs HbaseGetVerTsArgs;

struct _HbaseGetVerTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetVerTsArgsClass HbaseGetVerTsArgsClass;

GType hbase_get_ver_ts_args_get_type (void);
#define TYPE_HBASE_GET_VER_TS_ARGS (hbase_get_ver_ts_args_get_type())
#define HBASE_GET_VER_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_VER_TS_ARGS, HbaseGetVerTsArgs))
#define HBASE_GET_VER_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_VER_TS_ARGS, HbaseGetVerTsArgsClass))
#define IS_HBASE_GET_VER_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_VER_TS_ARGS))
#define IS_HBASE_GET_VER_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_VER_TS_ARGS))
#define HBASE_GET_VER_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_VER_TS_ARGS, HbaseGetVerTsArgsClass))

/* struct HbaseGetVerTsResult */
struct _HbaseGetVerTsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetVerTsResult HbaseGetVerTsResult;

struct _HbaseGetVerTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetVerTsResultClass HbaseGetVerTsResultClass;

GType hbase_get_ver_ts_result_get_type (void);
#define TYPE_HBASE_GET_VER_TS_RESULT (hbase_get_ver_ts_result_get_type())
#define HBASE_GET_VER_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_VER_TS_RESULT, HbaseGetVerTsResult))
#define HBASE_GET_VER_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_VER_TS_RESULT, HbaseGetVerTsResultClass))
#define IS_HBASE_GET_VER_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_VER_TS_RESULT))
#define IS_HBASE_GET_VER_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_VER_TS_RESULT))
#define HBASE_GET_VER_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_VER_TS_RESULT, HbaseGetVerTsResultClass))

/* struct HbaseGetRowArgs */
struct _HbaseGetRowArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowArgs HbaseGetRowArgs;

struct _HbaseGetRowArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowArgsClass HbaseGetRowArgsClass;

GType hbase_get_row_args_get_type (void);
#define TYPE_HBASE_GET_ROW_ARGS (hbase_get_row_args_get_type())
#define HBASE_GET_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_ARGS, HbaseGetRowArgs))
#define HBASE_GET_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_ARGS, HbaseGetRowArgsClass))
#define IS_HBASE_GET_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_ARGS))
#define IS_HBASE_GET_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_ARGS))
#define HBASE_GET_ROW_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_ARGS, HbaseGetRowArgsClass))

/* struct HbaseGetRowResult */
struct _HbaseGetRowResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowResult HbaseGetRowResult;

struct _HbaseGetRowResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowResultClass HbaseGetRowResultClass;

GType hbase_get_row_result_get_type (void);
#define TYPE_HBASE_GET_ROW_RESULT (hbase_get_row_result_get_type())
#define HBASE_GET_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_RESULT, HbaseGetRowResult))
#define HBASE_GET_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_RESULT, HbaseGetRowResultClass))
#define IS_HBASE_GET_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_RESULT))
#define IS_HBASE_GET_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_RESULT))
#define HBASE_GET_ROW_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_RESULT, HbaseGetRowResultClass))

/* struct HbaseGetRowWithColumnsArgs */
struct _HbaseGetRowWithColumnsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * columns;
  gboolean __isset_columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowWithColumnsArgs HbaseGetRowWithColumnsArgs;

struct _HbaseGetRowWithColumnsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowWithColumnsArgsClass HbaseGetRowWithColumnsArgsClass;

GType hbase_get_row_with_columns_args_get_type (void);
#define TYPE_HBASE_GET_ROW_WITH_COLUMNS_ARGS (hbase_get_row_with_columns_args_get_type())
#define HBASE_GET_ROW_WITH_COLUMNS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_ARGS, HbaseGetRowWithColumnsArgs))
#define HBASE_GET_ROW_WITH_COLUMNS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_WITH_COLUMNS_ARGS, HbaseGetRowWithColumnsArgsClass))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_ARGS))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_WITH_COLUMNS_ARGS))
#define HBASE_GET_ROW_WITH_COLUMNS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_ARGS, HbaseGetRowWithColumnsArgsClass))

/* struct HbaseGetRowWithColumnsResult */
struct _HbaseGetRowWithColumnsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowWithColumnsResult HbaseGetRowWithColumnsResult;

struct _HbaseGetRowWithColumnsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowWithColumnsResultClass HbaseGetRowWithColumnsResultClass;

GType hbase_get_row_with_columns_result_get_type (void);
#define TYPE_HBASE_GET_ROW_WITH_COLUMNS_RESULT (hbase_get_row_with_columns_result_get_type())
#define HBASE_GET_ROW_WITH_COLUMNS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_RESULT, HbaseGetRowWithColumnsResult))
#define HBASE_GET_ROW_WITH_COLUMNS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_WITH_COLUMNS_RESULT, HbaseGetRowWithColumnsResultClass))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_RESULT))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_WITH_COLUMNS_RESULT))
#define HBASE_GET_ROW_WITH_COLUMNS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_RESULT, HbaseGetRowWithColumnsResultClass))

/* struct HbaseGetRowTsArgs */
struct _HbaseGetRowTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowTsArgs HbaseGetRowTsArgs;

struct _HbaseGetRowTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowTsArgsClass HbaseGetRowTsArgsClass;

GType hbase_get_row_ts_args_get_type (void);
#define TYPE_HBASE_GET_ROW_TS_ARGS (hbase_get_row_ts_args_get_type())
#define HBASE_GET_ROW_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_TS_ARGS, HbaseGetRowTsArgs))
#define HBASE_GET_ROW_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_TS_ARGS, HbaseGetRowTsArgsClass))
#define IS_HBASE_GET_ROW_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_TS_ARGS))
#define IS_HBASE_GET_ROW_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_TS_ARGS))
#define HBASE_GET_ROW_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_TS_ARGS, HbaseGetRowTsArgsClass))

/* struct HbaseGetRowTsResult */
struct _HbaseGetRowTsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowTsResult HbaseGetRowTsResult;

struct _HbaseGetRowTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowTsResultClass HbaseGetRowTsResultClass;

GType hbase_get_row_ts_result_get_type (void);
#define TYPE_HBASE_GET_ROW_TS_RESULT (hbase_get_row_ts_result_get_type())
#define HBASE_GET_ROW_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_TS_RESULT, HbaseGetRowTsResult))
#define HBASE_GET_ROW_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_TS_RESULT, HbaseGetRowTsResultClass))
#define IS_HBASE_GET_ROW_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_TS_RESULT))
#define IS_HBASE_GET_ROW_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_TS_RESULT))
#define HBASE_GET_ROW_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_TS_RESULT, HbaseGetRowTsResultClass))

/* struct HbaseGetRowWithColumnsTsArgs */
struct _HbaseGetRowWithColumnsTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowWithColumnsTsArgs HbaseGetRowWithColumnsTsArgs;

struct _HbaseGetRowWithColumnsTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowWithColumnsTsArgsClass HbaseGetRowWithColumnsTsArgsClass;

GType hbase_get_row_with_columns_ts_args_get_type (void);
#define TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS (hbase_get_row_with_columns_ts_args_get_type())
#define HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS, HbaseGetRowWithColumnsTsArgs))
#define HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS, HbaseGetRowWithColumnsTsArgsClass))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS))
#define HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_ARGS, HbaseGetRowWithColumnsTsArgsClass))

/* struct HbaseGetRowWithColumnsTsResult */
struct _HbaseGetRowWithColumnsTsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowWithColumnsTsResult HbaseGetRowWithColumnsTsResult;

struct _HbaseGetRowWithColumnsTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowWithColumnsTsResultClass HbaseGetRowWithColumnsTsResultClass;

GType hbase_get_row_with_columns_ts_result_get_type (void);
#define TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT (hbase_get_row_with_columns_ts_result_get_type())
#define HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT, HbaseGetRowWithColumnsTsResult))
#define HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT, HbaseGetRowWithColumnsTsResultClass))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT))
#define IS_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT))
#define HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_WITH_COLUMNS_TS_RESULT, HbaseGetRowWithColumnsTsResultClass))

/* struct HbaseGetRowsArgs */
struct _HbaseGetRowsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * rows;
  gboolean __isset_rows;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowsArgs HbaseGetRowsArgs;

struct _HbaseGetRowsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsArgsClass HbaseGetRowsArgsClass;

GType hbase_get_rows_args_get_type (void);
#define TYPE_HBASE_GET_ROWS_ARGS (hbase_get_rows_args_get_type())
#define HBASE_GET_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_ARGS, HbaseGetRowsArgs))
#define HBASE_GET_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_ARGS, HbaseGetRowsArgsClass))
#define IS_HBASE_GET_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_ARGS))
#define IS_HBASE_GET_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_ARGS))
#define HBASE_GET_ROWS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_ARGS, HbaseGetRowsArgsClass))

/* struct HbaseGetRowsResult */
struct _HbaseGetRowsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowsResult HbaseGetRowsResult;

struct _HbaseGetRowsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsResultClass HbaseGetRowsResultClass;

GType hbase_get_rows_result_get_type (void);
#define TYPE_HBASE_GET_ROWS_RESULT (hbase_get_rows_result_get_type())
#define HBASE_GET_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_RESULT, HbaseGetRowsResult))
#define HBASE_GET_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_RESULT, HbaseGetRowsResultClass))
#define IS_HBASE_GET_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_RESULT))
#define IS_HBASE_GET_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_RESULT))
#define HBASE_GET_ROWS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_RESULT, HbaseGetRowsResultClass))

/* struct HbaseGetRowsWithColumnsArgs */
struct _HbaseGetRowsWithColumnsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * rows;
  gboolean __isset_rows;
  GPtrArray * columns;
  gboolean __isset_columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowsWithColumnsArgs HbaseGetRowsWithColumnsArgs;

struct _HbaseGetRowsWithColumnsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsWithColumnsArgsClass HbaseGetRowsWithColumnsArgsClass;

GType hbase_get_rows_with_columns_args_get_type (void);
#define TYPE_HBASE_GET_ROWS_WITH_COLUMNS_ARGS (hbase_get_rows_with_columns_args_get_type())
#define HBASE_GET_ROWS_WITH_COLUMNS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_ARGS, HbaseGetRowsWithColumnsArgs))
#define HBASE_GET_ROWS_WITH_COLUMNS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_WITH_COLUMNS_ARGS, HbaseGetRowsWithColumnsArgsClass))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_ARGS))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_ARGS))
#define HBASE_GET_ROWS_WITH_COLUMNS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_ARGS, HbaseGetRowsWithColumnsArgsClass))

/* struct HbaseGetRowsWithColumnsResult */
struct _HbaseGetRowsWithColumnsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowsWithColumnsResult HbaseGetRowsWithColumnsResult;

struct _HbaseGetRowsWithColumnsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsWithColumnsResultClass HbaseGetRowsWithColumnsResultClass;

GType hbase_get_rows_with_columns_result_get_type (void);
#define TYPE_HBASE_GET_ROWS_WITH_COLUMNS_RESULT (hbase_get_rows_with_columns_result_get_type())
#define HBASE_GET_ROWS_WITH_COLUMNS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_RESULT, HbaseGetRowsWithColumnsResult))
#define HBASE_GET_ROWS_WITH_COLUMNS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_WITH_COLUMNS_RESULT, HbaseGetRowsWithColumnsResultClass))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_RESULT))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_RESULT))
#define HBASE_GET_ROWS_WITH_COLUMNS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_RESULT, HbaseGetRowsWithColumnsResultClass))

/* struct HbaseGetRowsTsArgs */
struct _HbaseGetRowsTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * rows;
  gboolean __isset_rows;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowsTsArgs HbaseGetRowsTsArgs;

struct _HbaseGetRowsTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsTsArgsClass HbaseGetRowsTsArgsClass;

GType hbase_get_rows_ts_args_get_type (void);
#define TYPE_HBASE_GET_ROWS_TS_ARGS (hbase_get_rows_ts_args_get_type())
#define HBASE_GET_ROWS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_TS_ARGS, HbaseGetRowsTsArgs))
#define HBASE_GET_ROWS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_TS_ARGS, HbaseGetRowsTsArgsClass))
#define IS_HBASE_GET_ROWS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_TS_ARGS))
#define IS_HBASE_GET_ROWS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_TS_ARGS))
#define HBASE_GET_ROWS_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_TS_ARGS, HbaseGetRowsTsArgsClass))

/* struct HbaseGetRowsTsResult */
struct _HbaseGetRowsTsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowsTsResult HbaseGetRowsTsResult;

struct _HbaseGetRowsTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsTsResultClass HbaseGetRowsTsResultClass;

GType hbase_get_rows_ts_result_get_type (void);
#define TYPE_HBASE_GET_ROWS_TS_RESULT (hbase_get_rows_ts_result_get_type())
#define HBASE_GET_ROWS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_TS_RESULT, HbaseGetRowsTsResult))
#define HBASE_GET_ROWS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_TS_RESULT, HbaseGetRowsTsResultClass))
#define IS_HBASE_GET_ROWS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_TS_RESULT))
#define IS_HBASE_GET_ROWS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_TS_RESULT))
#define HBASE_GET_ROWS_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_TS_RESULT, HbaseGetRowsTsResultClass))

/* struct HbaseGetRowsWithColumnsTsArgs */
struct _HbaseGetRowsWithColumnsTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * rows;
  gboolean __isset_rows;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseGetRowsWithColumnsTsArgs HbaseGetRowsWithColumnsTsArgs;

struct _HbaseGetRowsWithColumnsTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsWithColumnsTsArgsClass HbaseGetRowsWithColumnsTsArgsClass;

GType hbase_get_rows_with_columns_ts_args_get_type (void);
#define TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS (hbase_get_rows_with_columns_ts_args_get_type())
#define HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS, HbaseGetRowsWithColumnsTsArgs))
#define HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS, HbaseGetRowsWithColumnsTsArgsClass))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS))
#define HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_ARGS, HbaseGetRowsWithColumnsTsArgsClass))

/* struct HbaseGetRowsWithColumnsTsResult */
struct _HbaseGetRowsWithColumnsTsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowsWithColumnsTsResult HbaseGetRowsWithColumnsTsResult;

struct _HbaseGetRowsWithColumnsTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowsWithColumnsTsResultClass HbaseGetRowsWithColumnsTsResultClass;

GType hbase_get_rows_with_columns_ts_result_get_type (void);
#define TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT (hbase_get_rows_with_columns_ts_result_get_type())
#define HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT, HbaseGetRowsWithColumnsTsResult))
#define HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT, HbaseGetRowsWithColumnsTsResultClass))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT))
#define IS_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT))
#define HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROWS_WITH_COLUMNS_TS_RESULT, HbaseGetRowsWithColumnsTsResultClass))

/* struct HbaseMutateRowArgs */
struct _HbaseMutateRowArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * mutations;
  gboolean __isset_mutations;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseMutateRowArgs HbaseMutateRowArgs;

struct _HbaseMutateRowArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowArgsClass HbaseMutateRowArgsClass;

GType hbase_mutate_row_args_get_type (void);
#define TYPE_HBASE_MUTATE_ROW_ARGS (hbase_mutate_row_args_get_type())
#define HBASE_MUTATE_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROW_ARGS, HbaseMutateRowArgs))
#define HBASE_MUTATE_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROW_ARGS, HbaseMutateRowArgsClass))
#define IS_HBASE_MUTATE_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROW_ARGS))
#define IS_HBASE_MUTATE_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROW_ARGS))
#define HBASE_MUTATE_ROW_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROW_ARGS, HbaseMutateRowArgsClass))

/* struct HbaseMutateRowResult */
struct _HbaseMutateRowResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseMutateRowResult HbaseMutateRowResult;

struct _HbaseMutateRowResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowResultClass HbaseMutateRowResultClass;

GType hbase_mutate_row_result_get_type (void);
#define TYPE_HBASE_MUTATE_ROW_RESULT (hbase_mutate_row_result_get_type())
#define HBASE_MUTATE_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROW_RESULT, HbaseMutateRowResult))
#define HBASE_MUTATE_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROW_RESULT, HbaseMutateRowResultClass))
#define IS_HBASE_MUTATE_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROW_RESULT))
#define IS_HBASE_MUTATE_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROW_RESULT))
#define HBASE_MUTATE_ROW_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROW_RESULT, HbaseMutateRowResultClass))

/* struct HbaseMutateRowTsArgs */
struct _HbaseMutateRowTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * mutations;
  gboolean __isset_mutations;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseMutateRowTsArgs HbaseMutateRowTsArgs;

struct _HbaseMutateRowTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowTsArgsClass HbaseMutateRowTsArgsClass;

GType hbase_mutate_row_ts_args_get_type (void);
#define TYPE_HBASE_MUTATE_ROW_TS_ARGS (hbase_mutate_row_ts_args_get_type())
#define HBASE_MUTATE_ROW_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROW_TS_ARGS, HbaseMutateRowTsArgs))
#define HBASE_MUTATE_ROW_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROW_TS_ARGS, HbaseMutateRowTsArgsClass))
#define IS_HBASE_MUTATE_ROW_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROW_TS_ARGS))
#define IS_HBASE_MUTATE_ROW_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROW_TS_ARGS))
#define HBASE_MUTATE_ROW_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROW_TS_ARGS, HbaseMutateRowTsArgsClass))

/* struct HbaseMutateRowTsResult */
struct _HbaseMutateRowTsResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseMutateRowTsResult HbaseMutateRowTsResult;

struct _HbaseMutateRowTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowTsResultClass HbaseMutateRowTsResultClass;

GType hbase_mutate_row_ts_result_get_type (void);
#define TYPE_HBASE_MUTATE_ROW_TS_RESULT (hbase_mutate_row_ts_result_get_type())
#define HBASE_MUTATE_ROW_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROW_TS_RESULT, HbaseMutateRowTsResult))
#define HBASE_MUTATE_ROW_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROW_TS_RESULT, HbaseMutateRowTsResultClass))
#define IS_HBASE_MUTATE_ROW_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROW_TS_RESULT))
#define IS_HBASE_MUTATE_ROW_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROW_TS_RESULT))
#define HBASE_MUTATE_ROW_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROW_TS_RESULT, HbaseMutateRowTsResultClass))

/* struct HbaseMutateRowsArgs */
struct _HbaseMutateRowsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * rowBatches;
  gboolean __isset_rowBatches;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseMutateRowsArgs HbaseMutateRowsArgs;

struct _HbaseMutateRowsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowsArgsClass HbaseMutateRowsArgsClass;

GType hbase_mutate_rows_args_get_type (void);
#define TYPE_HBASE_MUTATE_ROWS_ARGS (hbase_mutate_rows_args_get_type())
#define HBASE_MUTATE_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROWS_ARGS, HbaseMutateRowsArgs))
#define HBASE_MUTATE_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROWS_ARGS, HbaseMutateRowsArgsClass))
#define IS_HBASE_MUTATE_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROWS_ARGS))
#define IS_HBASE_MUTATE_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROWS_ARGS))
#define HBASE_MUTATE_ROWS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROWS_ARGS, HbaseMutateRowsArgsClass))

/* struct HbaseMutateRowsResult */
struct _HbaseMutateRowsResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseMutateRowsResult HbaseMutateRowsResult;

struct _HbaseMutateRowsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowsResultClass HbaseMutateRowsResultClass;

GType hbase_mutate_rows_result_get_type (void);
#define TYPE_HBASE_MUTATE_ROWS_RESULT (hbase_mutate_rows_result_get_type())
#define HBASE_MUTATE_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROWS_RESULT, HbaseMutateRowsResult))
#define HBASE_MUTATE_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROWS_RESULT, HbaseMutateRowsResultClass))
#define IS_HBASE_MUTATE_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROWS_RESULT))
#define IS_HBASE_MUTATE_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROWS_RESULT))
#define HBASE_MUTATE_ROWS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROWS_RESULT, HbaseMutateRowsResultClass))

/* struct HbaseMutateRowsTsArgs */
struct _HbaseMutateRowsTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GPtrArray * rowBatches;
  gboolean __isset_rowBatches;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseMutateRowsTsArgs HbaseMutateRowsTsArgs;

struct _HbaseMutateRowsTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowsTsArgsClass HbaseMutateRowsTsArgsClass;

GType hbase_mutate_rows_ts_args_get_type (void);
#define TYPE_HBASE_MUTATE_ROWS_TS_ARGS (hbase_mutate_rows_ts_args_get_type())
#define HBASE_MUTATE_ROWS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROWS_TS_ARGS, HbaseMutateRowsTsArgs))
#define HBASE_MUTATE_ROWS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROWS_TS_ARGS, HbaseMutateRowsTsArgsClass))
#define IS_HBASE_MUTATE_ROWS_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROWS_TS_ARGS))
#define IS_HBASE_MUTATE_ROWS_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROWS_TS_ARGS))
#define HBASE_MUTATE_ROWS_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROWS_TS_ARGS, HbaseMutateRowsTsArgsClass))

/* struct HbaseMutateRowsTsResult */
struct _HbaseMutateRowsTsResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseMutateRowsTsResult HbaseMutateRowsTsResult;

struct _HbaseMutateRowsTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseMutateRowsTsResultClass HbaseMutateRowsTsResultClass;

GType hbase_mutate_rows_ts_result_get_type (void);
#define TYPE_HBASE_MUTATE_ROWS_TS_RESULT (hbase_mutate_rows_ts_result_get_type())
#define HBASE_MUTATE_ROWS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_MUTATE_ROWS_TS_RESULT, HbaseMutateRowsTsResult))
#define HBASE_MUTATE_ROWS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_MUTATE_ROWS_TS_RESULT, HbaseMutateRowsTsResultClass))
#define IS_HBASE_MUTATE_ROWS_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_MUTATE_ROWS_TS_RESULT))
#define IS_HBASE_MUTATE_ROWS_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_MUTATE_ROWS_TS_RESULT))
#define HBASE_MUTATE_ROWS_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_MUTATE_ROWS_TS_RESULT, HbaseMutateRowsTsResultClass))

/* struct HbaseAtomicIncrementArgs */
struct _HbaseAtomicIncrementArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  gint64 value;
  gboolean __isset_value;
};
typedef struct _HbaseAtomicIncrementArgs HbaseAtomicIncrementArgs;

struct _HbaseAtomicIncrementArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseAtomicIncrementArgsClass HbaseAtomicIncrementArgsClass;

GType hbase_atomic_increment_args_get_type (void);
#define TYPE_HBASE_ATOMIC_INCREMENT_ARGS (hbase_atomic_increment_args_get_type())
#define HBASE_ATOMIC_INCREMENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_ATOMIC_INCREMENT_ARGS, HbaseAtomicIncrementArgs))
#define HBASE_ATOMIC_INCREMENT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_ATOMIC_INCREMENT_ARGS, HbaseAtomicIncrementArgsClass))
#define IS_HBASE_ATOMIC_INCREMENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_ATOMIC_INCREMENT_ARGS))
#define IS_HBASE_ATOMIC_INCREMENT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_ATOMIC_INCREMENT_ARGS))
#define HBASE_ATOMIC_INCREMENT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_ATOMIC_INCREMENT_ARGS, HbaseAtomicIncrementArgsClass))

/* struct HbaseAtomicIncrementResult */
struct _HbaseAtomicIncrementResult
{ 
  ThriftStruct parent; 

  /* public */
  gint64 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseAtomicIncrementResult HbaseAtomicIncrementResult;

struct _HbaseAtomicIncrementResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseAtomicIncrementResultClass HbaseAtomicIncrementResultClass;

GType hbase_atomic_increment_result_get_type (void);
#define TYPE_HBASE_ATOMIC_INCREMENT_RESULT (hbase_atomic_increment_result_get_type())
#define HBASE_ATOMIC_INCREMENT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_ATOMIC_INCREMENT_RESULT, HbaseAtomicIncrementResult))
#define HBASE_ATOMIC_INCREMENT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_ATOMIC_INCREMENT_RESULT, HbaseAtomicIncrementResultClass))
#define IS_HBASE_ATOMIC_INCREMENT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_ATOMIC_INCREMENT_RESULT))
#define IS_HBASE_ATOMIC_INCREMENT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_ATOMIC_INCREMENT_RESULT))
#define HBASE_ATOMIC_INCREMENT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_ATOMIC_INCREMENT_RESULT, HbaseAtomicIncrementResultClass))

/* struct HbaseDeleteAllArgs */
struct _HbaseDeleteAllArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseDeleteAllArgs HbaseDeleteAllArgs;

struct _HbaseDeleteAllArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllArgsClass HbaseDeleteAllArgsClass;

GType hbase_delete_all_args_get_type (void);
#define TYPE_HBASE_DELETE_ALL_ARGS (hbase_delete_all_args_get_type())
#define HBASE_DELETE_ALL_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_ARGS, HbaseDeleteAllArgs))
#define HBASE_DELETE_ALL_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_ARGS, HbaseDeleteAllArgsClass))
#define IS_HBASE_DELETE_ALL_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_ARGS))
#define IS_HBASE_DELETE_ALL_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_ARGS))
#define HBASE_DELETE_ALL_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_ARGS, HbaseDeleteAllArgsClass))

/* struct HbaseDeleteAllResult */
struct _HbaseDeleteAllResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseDeleteAllResult HbaseDeleteAllResult;

struct _HbaseDeleteAllResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllResultClass HbaseDeleteAllResultClass;

GType hbase_delete_all_result_get_type (void);
#define TYPE_HBASE_DELETE_ALL_RESULT (hbase_delete_all_result_get_type())
#define HBASE_DELETE_ALL_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_RESULT, HbaseDeleteAllResult))
#define HBASE_DELETE_ALL_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_RESULT, HbaseDeleteAllResultClass))
#define IS_HBASE_DELETE_ALL_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_RESULT))
#define IS_HBASE_DELETE_ALL_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_RESULT))
#define HBASE_DELETE_ALL_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_RESULT, HbaseDeleteAllResultClass))

/* struct HbaseDeleteAllTsArgs */
struct _HbaseDeleteAllTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseDeleteAllTsArgs HbaseDeleteAllTsArgs;

struct _HbaseDeleteAllTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllTsArgsClass HbaseDeleteAllTsArgsClass;

GType hbase_delete_all_ts_args_get_type (void);
#define TYPE_HBASE_DELETE_ALL_TS_ARGS (hbase_delete_all_ts_args_get_type())
#define HBASE_DELETE_ALL_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_TS_ARGS, HbaseDeleteAllTsArgs))
#define HBASE_DELETE_ALL_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_TS_ARGS, HbaseDeleteAllTsArgsClass))
#define IS_HBASE_DELETE_ALL_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_TS_ARGS))
#define IS_HBASE_DELETE_ALL_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_TS_ARGS))
#define HBASE_DELETE_ALL_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_TS_ARGS, HbaseDeleteAllTsArgsClass))

/* struct HbaseDeleteAllTsResult */
struct _HbaseDeleteAllTsResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseDeleteAllTsResult HbaseDeleteAllTsResult;

struct _HbaseDeleteAllTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllTsResultClass HbaseDeleteAllTsResultClass;

GType hbase_delete_all_ts_result_get_type (void);
#define TYPE_HBASE_DELETE_ALL_TS_RESULT (hbase_delete_all_ts_result_get_type())
#define HBASE_DELETE_ALL_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_TS_RESULT, HbaseDeleteAllTsResult))
#define HBASE_DELETE_ALL_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_TS_RESULT, HbaseDeleteAllTsResultClass))
#define IS_HBASE_DELETE_ALL_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_TS_RESULT))
#define IS_HBASE_DELETE_ALL_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_TS_RESULT))
#define HBASE_DELETE_ALL_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_TS_RESULT, HbaseDeleteAllTsResultClass))

/* struct HbaseDeleteAllRowArgs */
struct _HbaseDeleteAllRowArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseDeleteAllRowArgs HbaseDeleteAllRowArgs;

struct _HbaseDeleteAllRowArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllRowArgsClass HbaseDeleteAllRowArgsClass;

GType hbase_delete_all_row_args_get_type (void);
#define TYPE_HBASE_DELETE_ALL_ROW_ARGS (hbase_delete_all_row_args_get_type())
#define HBASE_DELETE_ALL_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_ROW_ARGS, HbaseDeleteAllRowArgs))
#define HBASE_DELETE_ALL_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_ROW_ARGS, HbaseDeleteAllRowArgsClass))
#define IS_HBASE_DELETE_ALL_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_ROW_ARGS))
#define IS_HBASE_DELETE_ALL_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_ROW_ARGS))
#define HBASE_DELETE_ALL_ROW_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_ROW_ARGS, HbaseDeleteAllRowArgsClass))

/* struct HbaseDeleteAllRowResult */
struct _HbaseDeleteAllRowResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseDeleteAllRowResult HbaseDeleteAllRowResult;

struct _HbaseDeleteAllRowResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllRowResultClass HbaseDeleteAllRowResultClass;

GType hbase_delete_all_row_result_get_type (void);
#define TYPE_HBASE_DELETE_ALL_ROW_RESULT (hbase_delete_all_row_result_get_type())
#define HBASE_DELETE_ALL_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_ROW_RESULT, HbaseDeleteAllRowResult))
#define HBASE_DELETE_ALL_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_ROW_RESULT, HbaseDeleteAllRowResultClass))
#define IS_HBASE_DELETE_ALL_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_ROW_RESULT))
#define IS_HBASE_DELETE_ALL_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_ROW_RESULT))
#define HBASE_DELETE_ALL_ROW_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_ROW_RESULT, HbaseDeleteAllRowResultClass))

/* struct HbaseIncrementArgs */
struct _HbaseIncrementArgs
{ 
  ThriftStruct parent; 

  /* public */
  TIncrement * increment;
  gboolean __isset_increment;
};
typedef struct _HbaseIncrementArgs HbaseIncrementArgs;

struct _HbaseIncrementArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseIncrementArgsClass HbaseIncrementArgsClass;

GType hbase_increment_args_get_type (void);
#define TYPE_HBASE_INCREMENT_ARGS (hbase_increment_args_get_type())
#define HBASE_INCREMENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_INCREMENT_ARGS, HbaseIncrementArgs))
#define HBASE_INCREMENT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_INCREMENT_ARGS, HbaseIncrementArgsClass))
#define IS_HBASE_INCREMENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_INCREMENT_ARGS))
#define IS_HBASE_INCREMENT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_INCREMENT_ARGS))
#define HBASE_INCREMENT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_INCREMENT_ARGS, HbaseIncrementArgsClass))

/* struct HbaseIncrementResult */
struct _HbaseIncrementResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseIncrementResult HbaseIncrementResult;

struct _HbaseIncrementResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseIncrementResultClass HbaseIncrementResultClass;

GType hbase_increment_result_get_type (void);
#define TYPE_HBASE_INCREMENT_RESULT (hbase_increment_result_get_type())
#define HBASE_INCREMENT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_INCREMENT_RESULT, HbaseIncrementResult))
#define HBASE_INCREMENT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_INCREMENT_RESULT, HbaseIncrementResultClass))
#define IS_HBASE_INCREMENT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_INCREMENT_RESULT))
#define IS_HBASE_INCREMENT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_INCREMENT_RESULT))
#define HBASE_INCREMENT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_INCREMENT_RESULT, HbaseIncrementResultClass))

/* struct HbaseIncrementRowsArgs */
struct _HbaseIncrementRowsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * increments;
  gboolean __isset_increments;
};
typedef struct _HbaseIncrementRowsArgs HbaseIncrementRowsArgs;

struct _HbaseIncrementRowsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseIncrementRowsArgsClass HbaseIncrementRowsArgsClass;

GType hbase_increment_rows_args_get_type (void);
#define TYPE_HBASE_INCREMENT_ROWS_ARGS (hbase_increment_rows_args_get_type())
#define HBASE_INCREMENT_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_INCREMENT_ROWS_ARGS, HbaseIncrementRowsArgs))
#define HBASE_INCREMENT_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_INCREMENT_ROWS_ARGS, HbaseIncrementRowsArgsClass))
#define IS_HBASE_INCREMENT_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_INCREMENT_ROWS_ARGS))
#define IS_HBASE_INCREMENT_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_INCREMENT_ROWS_ARGS))
#define HBASE_INCREMENT_ROWS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_INCREMENT_ROWS_ARGS, HbaseIncrementRowsArgsClass))

/* struct HbaseIncrementRowsResult */
struct _HbaseIncrementRowsResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseIncrementRowsResult HbaseIncrementRowsResult;

struct _HbaseIncrementRowsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseIncrementRowsResultClass HbaseIncrementRowsResultClass;

GType hbase_increment_rows_result_get_type (void);
#define TYPE_HBASE_INCREMENT_ROWS_RESULT (hbase_increment_rows_result_get_type())
#define HBASE_INCREMENT_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_INCREMENT_ROWS_RESULT, HbaseIncrementRowsResult))
#define HBASE_INCREMENT_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_INCREMENT_ROWS_RESULT, HbaseIncrementRowsResultClass))
#define IS_HBASE_INCREMENT_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_INCREMENT_ROWS_RESULT))
#define IS_HBASE_INCREMENT_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_INCREMENT_ROWS_RESULT))
#define HBASE_INCREMENT_ROWS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_INCREMENT_ROWS_RESULT, HbaseIncrementRowsResultClass))

/* struct HbaseDeleteAllRowTsArgs */
struct _HbaseDeleteAllRowTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseDeleteAllRowTsArgs HbaseDeleteAllRowTsArgs;

struct _HbaseDeleteAllRowTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllRowTsArgsClass HbaseDeleteAllRowTsArgsClass;

GType hbase_delete_all_row_ts_args_get_type (void);
#define TYPE_HBASE_DELETE_ALL_ROW_TS_ARGS (hbase_delete_all_row_ts_args_get_type())
#define HBASE_DELETE_ALL_ROW_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_ROW_TS_ARGS, HbaseDeleteAllRowTsArgs))
#define HBASE_DELETE_ALL_ROW_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_ROW_TS_ARGS, HbaseDeleteAllRowTsArgsClass))
#define IS_HBASE_DELETE_ALL_ROW_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_ROW_TS_ARGS))
#define IS_HBASE_DELETE_ALL_ROW_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_ROW_TS_ARGS))
#define HBASE_DELETE_ALL_ROW_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_ROW_TS_ARGS, HbaseDeleteAllRowTsArgsClass))

/* struct HbaseDeleteAllRowTsResult */
struct _HbaseDeleteAllRowTsResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseDeleteAllRowTsResult HbaseDeleteAllRowTsResult;

struct _HbaseDeleteAllRowTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseDeleteAllRowTsResultClass HbaseDeleteAllRowTsResultClass;

GType hbase_delete_all_row_ts_result_get_type (void);
#define TYPE_HBASE_DELETE_ALL_ROW_TS_RESULT (hbase_delete_all_row_ts_result_get_type())
#define HBASE_DELETE_ALL_ROW_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_DELETE_ALL_ROW_TS_RESULT, HbaseDeleteAllRowTsResult))
#define HBASE_DELETE_ALL_ROW_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_DELETE_ALL_ROW_TS_RESULT, HbaseDeleteAllRowTsResultClass))
#define IS_HBASE_DELETE_ALL_ROW_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_DELETE_ALL_ROW_TS_RESULT))
#define IS_HBASE_DELETE_ALL_ROW_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_DELETE_ALL_ROW_TS_RESULT))
#define HBASE_DELETE_ALL_ROW_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_DELETE_ALL_ROW_TS_RESULT, HbaseDeleteAllRowTsResultClass))

/* struct HbaseScannerOpenWithScanArgs */
struct _HbaseScannerOpenWithScanArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  TScan * scan;
  gboolean __isset_scan;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseScannerOpenWithScanArgs HbaseScannerOpenWithScanArgs;

struct _HbaseScannerOpenWithScanArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithScanArgsClass HbaseScannerOpenWithScanArgsClass;

GType hbase_scanner_open_with_scan_args_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS (hbase_scanner_open_with_scan_args_get_type())
#define HBASE_SCANNER_OPEN_WITH_SCAN_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS, HbaseScannerOpenWithScanArgs))
#define HBASE_SCANNER_OPEN_WITH_SCAN_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS, HbaseScannerOpenWithScanArgsClass))
#define IS_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS))
#define IS_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS))
#define HBASE_SCANNER_OPEN_WITH_SCAN_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_ARGS, HbaseScannerOpenWithScanArgsClass))

/* struct HbaseScannerOpenWithScanResult */
struct _HbaseScannerOpenWithScanResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseScannerOpenWithScanResult HbaseScannerOpenWithScanResult;

struct _HbaseScannerOpenWithScanResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithScanResultClass HbaseScannerOpenWithScanResultClass;

GType hbase_scanner_open_with_scan_result_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT (hbase_scanner_open_with_scan_result_get_type())
#define HBASE_SCANNER_OPEN_WITH_SCAN_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT, HbaseScannerOpenWithScanResult))
#define HBASE_SCANNER_OPEN_WITH_SCAN_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT, HbaseScannerOpenWithScanResultClass))
#define IS_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT))
#define IS_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT))
#define HBASE_SCANNER_OPEN_WITH_SCAN_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_SCAN_RESULT, HbaseScannerOpenWithScanResultClass))

/* struct HbaseScannerOpenArgs */
struct _HbaseScannerOpenArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * startRow;
  gboolean __isset_startRow;
  GPtrArray * columns;
  gboolean __isset_columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseScannerOpenArgs HbaseScannerOpenArgs;

struct _HbaseScannerOpenArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenArgsClass HbaseScannerOpenArgsClass;

GType hbase_scanner_open_args_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_ARGS (hbase_scanner_open_args_get_type())
#define HBASE_SCANNER_OPEN_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_ARGS, HbaseScannerOpenArgs))
#define HBASE_SCANNER_OPEN_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_ARGS, HbaseScannerOpenArgsClass))
#define IS_HBASE_SCANNER_OPEN_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_ARGS))
#define IS_HBASE_SCANNER_OPEN_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_ARGS))
#define HBASE_SCANNER_OPEN_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_ARGS, HbaseScannerOpenArgsClass))

/* struct HbaseScannerOpenResult */
struct _HbaseScannerOpenResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseScannerOpenResult HbaseScannerOpenResult;

struct _HbaseScannerOpenResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenResultClass HbaseScannerOpenResultClass;

GType hbase_scanner_open_result_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_RESULT (hbase_scanner_open_result_get_type())
#define HBASE_SCANNER_OPEN_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_RESULT, HbaseScannerOpenResult))
#define HBASE_SCANNER_OPEN_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_RESULT, HbaseScannerOpenResultClass))
#define IS_HBASE_SCANNER_OPEN_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_RESULT))
#define IS_HBASE_SCANNER_OPEN_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_RESULT))
#define HBASE_SCANNER_OPEN_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_RESULT, HbaseScannerOpenResultClass))

/* struct HbaseScannerOpenWithStopArgs */
struct _HbaseScannerOpenWithStopArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * startRow;
  gboolean __isset_startRow;
  GByteArray * stopRow;
  gboolean __isset_stopRow;
  GPtrArray * columns;
  gboolean __isset_columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseScannerOpenWithStopArgs HbaseScannerOpenWithStopArgs;

struct _HbaseScannerOpenWithStopArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithStopArgsClass HbaseScannerOpenWithStopArgsClass;

GType hbase_scanner_open_with_stop_args_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_STOP_ARGS (hbase_scanner_open_with_stop_args_get_type())
#define HBASE_SCANNER_OPEN_WITH_STOP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_ARGS, HbaseScannerOpenWithStopArgs))
#define HBASE_SCANNER_OPEN_WITH_STOP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_STOP_ARGS, HbaseScannerOpenWithStopArgsClass))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_ARGS))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_ARGS))
#define HBASE_SCANNER_OPEN_WITH_STOP_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_ARGS, HbaseScannerOpenWithStopArgsClass))

/* struct HbaseScannerOpenWithStopResult */
struct _HbaseScannerOpenWithStopResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseScannerOpenWithStopResult HbaseScannerOpenWithStopResult;

struct _HbaseScannerOpenWithStopResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithStopResultClass HbaseScannerOpenWithStopResultClass;

GType hbase_scanner_open_with_stop_result_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_STOP_RESULT (hbase_scanner_open_with_stop_result_get_type())
#define HBASE_SCANNER_OPEN_WITH_STOP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_RESULT, HbaseScannerOpenWithStopResult))
#define HBASE_SCANNER_OPEN_WITH_STOP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_STOP_RESULT, HbaseScannerOpenWithStopResultClass))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_RESULT))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_RESULT))
#define HBASE_SCANNER_OPEN_WITH_STOP_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_RESULT, HbaseScannerOpenWithStopResultClass))

/* struct HbaseScannerOpenWithPrefixArgs */
struct _HbaseScannerOpenWithPrefixArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * startAndPrefix;
  gboolean __isset_startAndPrefix;
  GPtrArray * columns;
  gboolean __isset_columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseScannerOpenWithPrefixArgs HbaseScannerOpenWithPrefixArgs;

struct _HbaseScannerOpenWithPrefixArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithPrefixArgsClass HbaseScannerOpenWithPrefixArgsClass;

GType hbase_scanner_open_with_prefix_args_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS (hbase_scanner_open_with_prefix_args_get_type())
#define HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS, HbaseScannerOpenWithPrefixArgs))
#define HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS, HbaseScannerOpenWithPrefixArgsClass))
#define IS_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS))
#define IS_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS))
#define HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_ARGS, HbaseScannerOpenWithPrefixArgsClass))

/* struct HbaseScannerOpenWithPrefixResult */
struct _HbaseScannerOpenWithPrefixResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseScannerOpenWithPrefixResult HbaseScannerOpenWithPrefixResult;

struct _HbaseScannerOpenWithPrefixResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithPrefixResultClass HbaseScannerOpenWithPrefixResultClass;

GType hbase_scanner_open_with_prefix_result_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT (hbase_scanner_open_with_prefix_result_get_type())
#define HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT, HbaseScannerOpenWithPrefixResult))
#define HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT, HbaseScannerOpenWithPrefixResultClass))
#define IS_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT))
#define IS_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT))
#define HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_PREFIX_RESULT, HbaseScannerOpenWithPrefixResultClass))

/* struct HbaseScannerOpenTsArgs */
struct _HbaseScannerOpenTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * startRow;
  gboolean __isset_startRow;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseScannerOpenTsArgs HbaseScannerOpenTsArgs;

struct _HbaseScannerOpenTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenTsArgsClass HbaseScannerOpenTsArgsClass;

GType hbase_scanner_open_ts_args_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_TS_ARGS (hbase_scanner_open_ts_args_get_type())
#define HBASE_SCANNER_OPEN_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_TS_ARGS, HbaseScannerOpenTsArgs))
#define HBASE_SCANNER_OPEN_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_TS_ARGS, HbaseScannerOpenTsArgsClass))
#define IS_HBASE_SCANNER_OPEN_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_TS_ARGS))
#define IS_HBASE_SCANNER_OPEN_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_TS_ARGS))
#define HBASE_SCANNER_OPEN_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_TS_ARGS, HbaseScannerOpenTsArgsClass))

/* struct HbaseScannerOpenTsResult */
struct _HbaseScannerOpenTsResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseScannerOpenTsResult HbaseScannerOpenTsResult;

struct _HbaseScannerOpenTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenTsResultClass HbaseScannerOpenTsResultClass;

GType hbase_scanner_open_ts_result_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_TS_RESULT (hbase_scanner_open_ts_result_get_type())
#define HBASE_SCANNER_OPEN_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_TS_RESULT, HbaseScannerOpenTsResult))
#define HBASE_SCANNER_OPEN_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_TS_RESULT, HbaseScannerOpenTsResultClass))
#define IS_HBASE_SCANNER_OPEN_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_TS_RESULT))
#define IS_HBASE_SCANNER_OPEN_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_TS_RESULT))
#define HBASE_SCANNER_OPEN_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_TS_RESULT, HbaseScannerOpenTsResultClass))

/* struct HbaseScannerOpenWithStopTsArgs */
struct _HbaseScannerOpenWithStopTsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * startRow;
  gboolean __isset_startRow;
  GByteArray * stopRow;
  gboolean __isset_stopRow;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseScannerOpenWithStopTsArgs HbaseScannerOpenWithStopTsArgs;

struct _HbaseScannerOpenWithStopTsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithStopTsArgsClass HbaseScannerOpenWithStopTsArgsClass;

GType hbase_scanner_open_with_stop_ts_args_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS (hbase_scanner_open_with_stop_ts_args_get_type())
#define HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS, HbaseScannerOpenWithStopTsArgs))
#define HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS, HbaseScannerOpenWithStopTsArgsClass))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS))
#define HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_ARGS, HbaseScannerOpenWithStopTsArgsClass))

/* struct HbaseScannerOpenWithStopTsResult */
struct _HbaseScannerOpenWithStopTsResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseScannerOpenWithStopTsResult HbaseScannerOpenWithStopTsResult;

struct _HbaseScannerOpenWithStopTsResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerOpenWithStopTsResultClass HbaseScannerOpenWithStopTsResultClass;

GType hbase_scanner_open_with_stop_ts_result_get_type (void);
#define TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT (hbase_scanner_open_with_stop_ts_result_get_type())
#define HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT, HbaseScannerOpenWithStopTsResult))
#define HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT, HbaseScannerOpenWithStopTsResultClass))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT))
#define IS_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT))
#define HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_OPEN_WITH_STOP_TS_RESULT, HbaseScannerOpenWithStopTsResultClass))

/* struct HbaseScannerGetArgs */
struct _HbaseScannerGetArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 id;
  gboolean __isset_id;
};
typedef struct _HbaseScannerGetArgs HbaseScannerGetArgs;

struct _HbaseScannerGetArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerGetArgsClass HbaseScannerGetArgsClass;

GType hbase_scanner_get_args_get_type (void);
#define TYPE_HBASE_SCANNER_GET_ARGS (hbase_scanner_get_args_get_type())
#define HBASE_SCANNER_GET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_GET_ARGS, HbaseScannerGetArgs))
#define HBASE_SCANNER_GET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_GET_ARGS, HbaseScannerGetArgsClass))
#define IS_HBASE_SCANNER_GET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_GET_ARGS))
#define IS_HBASE_SCANNER_GET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_GET_ARGS))
#define HBASE_SCANNER_GET_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_GET_ARGS, HbaseScannerGetArgsClass))

/* struct HbaseScannerGetResult */
struct _HbaseScannerGetResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseScannerGetResult HbaseScannerGetResult;

struct _HbaseScannerGetResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerGetResultClass HbaseScannerGetResultClass;

GType hbase_scanner_get_result_get_type (void);
#define TYPE_HBASE_SCANNER_GET_RESULT (hbase_scanner_get_result_get_type())
#define HBASE_SCANNER_GET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_GET_RESULT, HbaseScannerGetResult))
#define HBASE_SCANNER_GET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_GET_RESULT, HbaseScannerGetResultClass))
#define IS_HBASE_SCANNER_GET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_GET_RESULT))
#define IS_HBASE_SCANNER_GET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_GET_RESULT))
#define HBASE_SCANNER_GET_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_GET_RESULT, HbaseScannerGetResultClass))

/* struct HbaseScannerGetListArgs */
struct _HbaseScannerGetListArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 id;
  gboolean __isset_id;
  gint32 nbRows;
  gboolean __isset_nbRows;
};
typedef struct _HbaseScannerGetListArgs HbaseScannerGetListArgs;

struct _HbaseScannerGetListArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerGetListArgsClass HbaseScannerGetListArgsClass;

GType hbase_scanner_get_list_args_get_type (void);
#define TYPE_HBASE_SCANNER_GET_LIST_ARGS (hbase_scanner_get_list_args_get_type())
#define HBASE_SCANNER_GET_LIST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_GET_LIST_ARGS, HbaseScannerGetListArgs))
#define HBASE_SCANNER_GET_LIST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_GET_LIST_ARGS, HbaseScannerGetListArgsClass))
#define IS_HBASE_SCANNER_GET_LIST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_GET_LIST_ARGS))
#define IS_HBASE_SCANNER_GET_LIST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_GET_LIST_ARGS))
#define HBASE_SCANNER_GET_LIST_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_GET_LIST_ARGS, HbaseScannerGetListArgsClass))

/* struct HbaseScannerGetListResult */
struct _HbaseScannerGetListResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseScannerGetListResult HbaseScannerGetListResult;

struct _HbaseScannerGetListResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerGetListResultClass HbaseScannerGetListResultClass;

GType hbase_scanner_get_list_result_get_type (void);
#define TYPE_HBASE_SCANNER_GET_LIST_RESULT (hbase_scanner_get_list_result_get_type())
#define HBASE_SCANNER_GET_LIST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_GET_LIST_RESULT, HbaseScannerGetListResult))
#define HBASE_SCANNER_GET_LIST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_GET_LIST_RESULT, HbaseScannerGetListResultClass))
#define IS_HBASE_SCANNER_GET_LIST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_GET_LIST_RESULT))
#define IS_HBASE_SCANNER_GET_LIST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_GET_LIST_RESULT))
#define HBASE_SCANNER_GET_LIST_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_GET_LIST_RESULT, HbaseScannerGetListResultClass))

/* struct HbaseScannerCloseArgs */
struct _HbaseScannerCloseArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 id;
  gboolean __isset_id;
};
typedef struct _HbaseScannerCloseArgs HbaseScannerCloseArgs;

struct _HbaseScannerCloseArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerCloseArgsClass HbaseScannerCloseArgsClass;

GType hbase_scanner_close_args_get_type (void);
#define TYPE_HBASE_SCANNER_CLOSE_ARGS (hbase_scanner_close_args_get_type())
#define HBASE_SCANNER_CLOSE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_CLOSE_ARGS, HbaseScannerCloseArgs))
#define HBASE_SCANNER_CLOSE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_CLOSE_ARGS, HbaseScannerCloseArgsClass))
#define IS_HBASE_SCANNER_CLOSE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_CLOSE_ARGS))
#define IS_HBASE_SCANNER_CLOSE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_CLOSE_ARGS))
#define HBASE_SCANNER_CLOSE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_CLOSE_ARGS, HbaseScannerCloseArgsClass))

/* struct HbaseScannerCloseResult */
struct _HbaseScannerCloseResult
{ 
  ThriftStruct parent; 

  /* public */
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseScannerCloseResult HbaseScannerCloseResult;

struct _HbaseScannerCloseResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseScannerCloseResultClass HbaseScannerCloseResultClass;

GType hbase_scanner_close_result_get_type (void);
#define TYPE_HBASE_SCANNER_CLOSE_RESULT (hbase_scanner_close_result_get_type())
#define HBASE_SCANNER_CLOSE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_SCANNER_CLOSE_RESULT, HbaseScannerCloseResult))
#define HBASE_SCANNER_CLOSE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_SCANNER_CLOSE_RESULT, HbaseScannerCloseResultClass))
#define IS_HBASE_SCANNER_CLOSE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_SCANNER_CLOSE_RESULT))
#define IS_HBASE_SCANNER_CLOSE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_SCANNER_CLOSE_RESULT))
#define HBASE_SCANNER_CLOSE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_SCANNER_CLOSE_RESULT, HbaseScannerCloseResultClass))

/* struct HbaseGetRowOrBeforeArgs */
struct _HbaseGetRowOrBeforeArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * family;
  gboolean __isset_family;
};
typedef struct _HbaseGetRowOrBeforeArgs HbaseGetRowOrBeforeArgs;

struct _HbaseGetRowOrBeforeArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowOrBeforeArgsClass HbaseGetRowOrBeforeArgsClass;

GType hbase_get_row_or_before_args_get_type (void);
#define TYPE_HBASE_GET_ROW_OR_BEFORE_ARGS (hbase_get_row_or_before_args_get_type())
#define HBASE_GET_ROW_OR_BEFORE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_OR_BEFORE_ARGS, HbaseGetRowOrBeforeArgs))
#define HBASE_GET_ROW_OR_BEFORE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_OR_BEFORE_ARGS, HbaseGetRowOrBeforeArgsClass))
#define IS_HBASE_GET_ROW_OR_BEFORE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_OR_BEFORE_ARGS))
#define IS_HBASE_GET_ROW_OR_BEFORE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_OR_BEFORE_ARGS))
#define HBASE_GET_ROW_OR_BEFORE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_OR_BEFORE_ARGS, HbaseGetRowOrBeforeArgsClass))

/* struct HbaseGetRowOrBeforeResult */
struct _HbaseGetRowOrBeforeResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRowOrBeforeResult HbaseGetRowOrBeforeResult;

struct _HbaseGetRowOrBeforeResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRowOrBeforeResultClass HbaseGetRowOrBeforeResultClass;

GType hbase_get_row_or_before_result_get_type (void);
#define TYPE_HBASE_GET_ROW_OR_BEFORE_RESULT (hbase_get_row_or_before_result_get_type())
#define HBASE_GET_ROW_OR_BEFORE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_ROW_OR_BEFORE_RESULT, HbaseGetRowOrBeforeResult))
#define HBASE_GET_ROW_OR_BEFORE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_ROW_OR_BEFORE_RESULT, HbaseGetRowOrBeforeResultClass))
#define IS_HBASE_GET_ROW_OR_BEFORE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_ROW_OR_BEFORE_RESULT))
#define IS_HBASE_GET_ROW_OR_BEFORE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_ROW_OR_BEFORE_RESULT))
#define HBASE_GET_ROW_OR_BEFORE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_ROW_OR_BEFORE_RESULT, HbaseGetRowOrBeforeResultClass))

/* struct HbaseGetRegionInfoArgs */
struct _HbaseGetRegionInfoArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  gboolean __isset_row;
};
typedef struct _HbaseGetRegionInfoArgs HbaseGetRegionInfoArgs;

struct _HbaseGetRegionInfoArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRegionInfoArgsClass HbaseGetRegionInfoArgsClass;

GType hbase_get_region_info_args_get_type (void);
#define TYPE_HBASE_GET_REGION_INFO_ARGS (hbase_get_region_info_args_get_type())
#define HBASE_GET_REGION_INFO_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_REGION_INFO_ARGS, HbaseGetRegionInfoArgs))
#define HBASE_GET_REGION_INFO_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_REGION_INFO_ARGS, HbaseGetRegionInfoArgsClass))
#define IS_HBASE_GET_REGION_INFO_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_REGION_INFO_ARGS))
#define IS_HBASE_GET_REGION_INFO_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_REGION_INFO_ARGS))
#define HBASE_GET_REGION_INFO_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_REGION_INFO_ARGS, HbaseGetRegionInfoArgsClass))

/* struct HbaseGetRegionInfoResult */
struct _HbaseGetRegionInfoResult
{ 
  ThriftStruct parent; 

  /* public */
  TRegionInfo * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseGetRegionInfoResult HbaseGetRegionInfoResult;

struct _HbaseGetRegionInfoResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseGetRegionInfoResultClass HbaseGetRegionInfoResultClass;

GType hbase_get_region_info_result_get_type (void);
#define TYPE_HBASE_GET_REGION_INFO_RESULT (hbase_get_region_info_result_get_type())
#define HBASE_GET_REGION_INFO_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_GET_REGION_INFO_RESULT, HbaseGetRegionInfoResult))
#define HBASE_GET_REGION_INFO_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_GET_REGION_INFO_RESULT, HbaseGetRegionInfoResultClass))
#define IS_HBASE_GET_REGION_INFO_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_GET_REGION_INFO_RESULT))
#define IS_HBASE_GET_REGION_INFO_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_GET_REGION_INFO_RESULT))
#define HBASE_GET_REGION_INFO_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_GET_REGION_INFO_RESULT, HbaseGetRegionInfoResultClass))

/* struct HbaseAppendArgs */
struct _HbaseAppendArgs
{ 
  ThriftStruct parent; 

  /* public */
  TAppend * append;
  gboolean __isset_append;
};
typedef struct _HbaseAppendArgs HbaseAppendArgs;

struct _HbaseAppendArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseAppendArgsClass HbaseAppendArgsClass;

GType hbase_append_args_get_type (void);
#define TYPE_HBASE_APPEND_ARGS (hbase_append_args_get_type())
#define HBASE_APPEND_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_APPEND_ARGS, HbaseAppendArgs))
#define HBASE_APPEND_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_APPEND_ARGS, HbaseAppendArgsClass))
#define IS_HBASE_APPEND_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_APPEND_ARGS))
#define IS_HBASE_APPEND_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_APPEND_ARGS))
#define HBASE_APPEND_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_APPEND_ARGS, HbaseAppendArgsClass))

/* struct HbaseAppendResult */
struct _HbaseAppendResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
};
typedef struct _HbaseAppendResult HbaseAppendResult;

struct _HbaseAppendResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseAppendResultClass HbaseAppendResultClass;

GType hbase_append_result_get_type (void);
#define TYPE_HBASE_APPEND_RESULT (hbase_append_result_get_type())
#define HBASE_APPEND_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_APPEND_RESULT, HbaseAppendResult))
#define HBASE_APPEND_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_APPEND_RESULT, HbaseAppendResultClass))
#define IS_HBASE_APPEND_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_APPEND_RESULT))
#define IS_HBASE_APPEND_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_APPEND_RESULT))
#define HBASE_APPEND_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_APPEND_RESULT, HbaseAppendResultClass))

/* struct HbaseCheckAndPutArgs */
struct _HbaseCheckAndPutArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * tableName;
  gboolean __isset_tableName;
  GByteArray * row;
  gboolean __isset_row;
  GByteArray * column;
  gboolean __isset_column;
  GByteArray * value;
  gboolean __isset_value;
  Mutation * mput;
  gboolean __isset_mput;
  GHashTable * attributes;
  gboolean __isset_attributes;
};
typedef struct _HbaseCheckAndPutArgs HbaseCheckAndPutArgs;

struct _HbaseCheckAndPutArgsClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseCheckAndPutArgsClass HbaseCheckAndPutArgsClass;

GType hbase_check_and_put_args_get_type (void);
#define TYPE_HBASE_CHECK_AND_PUT_ARGS (hbase_check_and_put_args_get_type())
#define HBASE_CHECK_AND_PUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_CHECK_AND_PUT_ARGS, HbaseCheckAndPutArgs))
#define HBASE_CHECK_AND_PUT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_CHECK_AND_PUT_ARGS, HbaseCheckAndPutArgsClass))
#define IS_HBASE_CHECK_AND_PUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_CHECK_AND_PUT_ARGS))
#define IS_HBASE_CHECK_AND_PUT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_CHECK_AND_PUT_ARGS))
#define HBASE_CHECK_AND_PUT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_CHECK_AND_PUT_ARGS, HbaseCheckAndPutArgsClass))

/* struct HbaseCheckAndPutResult */
struct _HbaseCheckAndPutResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
  IOError * io;
  gboolean __isset_io;
  IllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _HbaseCheckAndPutResult HbaseCheckAndPutResult;

struct _HbaseCheckAndPutResultClass
{
  ThriftStructClass parent;
};
typedef struct _HbaseCheckAndPutResultClass HbaseCheckAndPutResultClass;

GType hbase_check_and_put_result_get_type (void);
#define TYPE_HBASE_CHECK_AND_PUT_RESULT (hbase_check_and_put_result_get_type())
#define HBASE_CHECK_AND_PUT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HBASE_CHECK_AND_PUT_RESULT, HbaseCheckAndPutResult))
#define HBASE_CHECK_AND_PUT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_HBASE_CHECK_AND_PUT_RESULT, HbaseCheckAndPutResultClass))
#define IS_HBASE_CHECK_AND_PUT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HBASE_CHECK_AND_PUT_RESULT))
#define IS_HBASE_CHECK_AND_PUT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_HBASE_CHECK_AND_PUT_RESULT))
#define HBASE_CHECK_AND_PUT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HBASE_CHECK_AND_PUT_RESULT, HbaseCheckAndPutResultClass))

#endif /* HBASE_TYPES_H */
